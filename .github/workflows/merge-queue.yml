name: Merge Queue

on:
  workflow_call:

env:
  GH_TOKEN: ${{ github.token }}
  MERGE_QUEUE_REPO: jakeprime/merge-queue
  PROJECT_REPO: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.issue.number }}

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Acknowledge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'eyes'
            });

      # we need to checkout 3 git branches:
      #  - merge-queue-repo: the main branch of the queue where these scripts live
      #  - merge-queue-state: this project's own merge queue state branch
      #  - project: where the work is and the merging will happen
      - name: Checkout merge queue repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MERGE_QUEUE_REPO }}
          token: ${{ secrets.MERGE_QUEUE_TOKEN }}
          path: merge-queue-repo

      - name: Checkout queue state
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MERGE_QUEUE_REPO }}
          token: ${{ secrets.MERGE_QUEUE_TOKEN }}
          path: merge-queue-state
          ref: ${{ env.PROJECT_REPO }}
          fetch-depth: 0

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          path: project
          fetch-depth: 0

      - name: Create initial comment
        run: |
         . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

         # --init because this is the initial comment, all following comments
         # will update this instance
         happy_update "üå± Initialising merging process..." --init

      - name: Ensure PR checks are passing
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          merge_state_status="$(
            gh pr view $PR_NUMBER \
               --repo $PROJECT_REPO \
               --json mergeStateStatus |
            jq --raw-output '.mergeStateStatus'
          )"

          if [[ "$merge_state_status" != "CLEAN" ]]; then
            sad_ending "‚úã Github does not think this PR is mergeable"
          fi

      - name: Set Git user
        run: |
          git config --global user.email "q-bot@jakeprime.com"
          git config --global user.name "Q-bot"
          git config --global pull.ff only

      - name: Load merge state
        id: load_state
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          lock_merge_queue

          cd $GITHUB_WORKSPACE/merge-queue-state

          branch_counter=$(jq '.branchCounter' state.json)
          branch_counter=$(($branch_counter + 1))

          happy_update "üßê Checking current merge queue..."

          pr_json="$(gh pr view $PR_NUMBER --repo $PROJECT_REPO --json title,headRefName,headRefOid)"
          title="$(echo $pr_json | jq --raw-output '.title')"
          pr_branch="$(echo $pr_json | jq --raw-output '.headRefName')"
          pr_sha="$(echo $pr_json | jq --raw-output '.headRefOid')"

          base_branch=$(
            cat state.json |
            jq --raw-output \
               '.mergeBranches | map(select(.status == "succeeded" or .status == "running")) | max_by(.count) | .name'
          )
          if [[ "$base_branch" == "null" ]]; then
            base_branch=main
          fi

          echo "branch_counter=$branch_counter" >> "$GITHUB_OUTPUT"
          echo "pr_branch=$pr_branch" >> "$GITHUB_OUTPUT"
          echo "base_branch=$base_branch" >> "$GITHUB_OUTPUT"
          echo "title=$title" >> "$GITHUB_OUTPUT"

          echo "MERGE_BRANCH=merge-branch-$branch_counter" >> "$GITHUB_ENV"
          echo "PR_SHA=$pr_sha" >> "$GITHUB_ENV"

      - name: Create merge branch
        id: create_merge_branch
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          branch_counter=${{ steps.load_state.outputs.branch_counter }}
          base_branch=${{ steps.load_state.outputs.base_branch }}
          pr_branch=${{ steps.load_state.outputs.pr_branch }}
          title="${{ steps.load_state.outputs.title }}"

          cd $GITHUB_WORKSPACE/project

          git fetch origin $base_branch $pr_branch

          git checkout $base_branch && git pull
          git checkout -b $MERGE_BRANCH

          git checkout $pr_branch && git pull
          git rebase $MERGE_BRANCH

          git merge --no-edit --no-ff $pr_branch
          git push --set-upstream origin HEAD:$MERGE_BRANCH

          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

          cd $GITHUB_WORKSPACE/merge-queue-state

          if [[ "$base_branch" == "main" ]]; then
            ancestors=[]
          else
            ancestors=$(
              cat state.json |
              jq --arg name "$base_branch" \
                 '.mergeBranches[] | select(.name == $name) | .ancestors | . += [$name]'
            )
          fi

          state="$(
            cat state.json |
            jq --arg name "$MERGE_BRANCH" \
               --arg pr_number "$PR_NUMBER" \
               --arg sha "$sha" \
               --arg title "$title" \
               --arg status "running" \
               --argjson count $branch_counter \
               --argjson ancestors "$ancestors" \
               '.mergeBranches += [{ name: $name, title: $title, pr_number: $pr_number, sha: $sha, status: $status, count: $count, ancestors: $ancestors }]'
          )"

          state="$(echo $state | jq --argjson count $branch_counter '.branchCounter = $count')"

          if [[ -n "$state" ]]; then
            echo "$state" > state.json
            git add state.json
            git commit -m 'Updating merge state'
            git push
          fi

          happy_update "ü¶§ ü¶É ü¶Ü Joining the queue..."

          unlock_merge_queue

      # - name: Unlock merge queue state
      #   run: merge-queue-repo/.github/scripts/unlock-merge-queue-state.sh

      - name: Wait for CircleCI result
        id: wait_for_ci
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          SHA=${{ steps.create_merge_branch.outputs.sha }}

          ci_link="https://app.circleci.com/pipelines/github/$PROJECT_REPO?branch=$MERGE_BRANCH"

          # Check 80 times at 15 minute intervals - 20 minutes wait
          for i in {1..80}; do
            ensure_pr_still_mergeable

            result=$(gh api repos/$PROJECT_REPO/commits/$SHA/status)

            state=$(echo "$result" | jq -r '.state')

            if [ "$state" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$state" = "failure" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 0
            fi

            happy_update "ü§û Waiting on [CI result]($ci_link)..."

            sleep 15
          done

          sad_ending "üíÄ Timed out waiting for CI result"

      - name: Handle CI result
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          lock_merge_queue

          cd $GITHUB_WORKSPACE/merge-queue-state

          ci_result=${{ steps.wait_for_ci.outputs.status }}

          if [[ "$ci_result" == "success" ]]; then
            branch_status="succeeded"
            happy_update "üü¢ CI passed..."
          elif [[ "$ci_result" == "failure" ]]; then
            # CI is a failure, but unless we're front of the queue we don't know
            # if we're the bad egg, so we won't remove ourselves until we know
            # We do know that none of our descendants will be passing though so
            # remove them
            sad_update "üòî CI failed, checking if this is us or a PR ahead in the queue..."
            branch_status="failed"
            remove_descendants_from_queue
          else
            sad_ending "üí£ Error - unknown result from CI, aborting"
          fi

          jq --arg name "$MERGE_BRANCH" \
             --arg branch_status "$branch_status" \
            '.mergeBranches |= map(if .name == $name then .status = $branch_status else . end)' \
            state.json > temp && mv temp state.json

          unlock_merge_queue

      - name: Wait until first in queue
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          pr_branch=${{ steps.load_state.outputs.pr_branch }}

          cd $GITHUB_WORKSPACE/merge-queue-state

          for i in {1..12}; do
            ensure_pr_still_mergeable

            # if we're the first branch we need to do something
            first_branch=$(
              cat state.json |
              jq --raw-output '.mergeBranches | min_by(.count) | .name'
            )

            if [[ "$MERGE_BRANCH" == "$first_branch" ]]; then
              # LFG
              exit 0
            fi

            happy_update "‚è≥ Waiting to reach the front of the queue..."

            sleep 5
          done

          sad_ending "üíÄ Timed out waiting to get to the front of the queue"

      - name: Merge to main
        run: |
          . $GITHUB_WORKSPACE/merge-queue-repo/.github/scripts/all.sh

          lock_merge_queue

          base_branch=${{ steps.load_state.outputs.base_branch }}
          pr_branch=${{ steps.load_state.outputs.pr_branch }}

          cd $GITHUB_WORKSPACE/merge-queue-state

          branch_status=$(
            cat state.json |
            jq --raw-output \
               --arg name "$MERGE_BRANCH" \
               '.mergeBranches[] | select(.name == $name) | .status'
          )

          # If we're here we're front of the queue. If we've also failed then
          # we must be a very bad egg indeed and should leave the process.
          if [[ "$branch_status" == "failed" ]]; then
            ci_link="https://app.circleci.com/pipelines/github/$PROJECT_REPO?branch=$MERGE_BRANCH"
            sad_ending "‚õî We‚Äôre front of the queue and CI has [failed]($ci_link), we can‚Äôt merge"
          fi

          # final check that the sha we are merging is correct
          cd $GITHUB_WORKSPACE/project
          git checkout $pr_branch
          git fetch origin $pr_branch
          git reset --hard origin/$pr_branch

          if [[ "$PR_SHA" != "$(git rev-parse HEAD)" ]]; then
            sad_ending "üôÉ The PR has been updated since the merge started, halting process"
          fi

          # We're are the front, we're not a failure, we can merge!
          happy_update "üôå Ready to merge..."

          git fetch origin main
          git rebase origin/main
          git push --force-with-lease origin HEAD:$pr_branch

          # TODO: Have a better way of checking this than an arbitrary sleep. If
          # we do the merge too soon the PR "closes" rather than "merges". The
          # result is the same for the code but it's not a nice end state.
          sleep 5

          git checkout main && git pull
          git merge $pr_branch --no-ff
          git push

          happy_update "‚úÖ Merged"

          remove_branch_from_queue

          unlock_merge_queue

          # delete the branch once the PR is in a merged state
          for i in {1..10}; do
            if [[ "$(gh pr view $PR_NUMBER --repo $PROJECT_REPO --json state --jq '.state')" == "MERGED" ]]; then
              # delete the PR branch
              git push --delete origin $pr_branch
              exit 0
            fi

            sleep 2
          done
